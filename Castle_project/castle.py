# Функциональные требования:
# Создание замка со стартовой прочностью 100 и довольством людей 100. ✅
# Генерация случайных событий, негативно влияющих на замок, через случайный промежуток времени. ✅
# Возможность пользователя выбирать контратаку для защиты замка. ✅
# Контратаки включают: восстановление прочности и довольства. ✅
# Ограничение на использование определенных контратак: "Пусть, пожалуйста, все будет как раньше" ✅
# можно использовать только один раз за игру, другие контратаки с ограниченным интервалом времени. ✅
# Ограничение на максимальное значение прочности и довольства (максимум 100). ✅
# Завершение игры, если прочность или довольство людей упадут до 0 или меньше. ✅

# Нефункциональные требования:
# Устойчивость и надежность программы, минимум ошибок и сбоев в работе.
# Интерфейс должен быть интуитивно понятным и легким для использования.
# Программа должна обеспечивать разнообразие случайных событий, чтобы игра была интересной и непредсказуемой.
# Время реакции на события и контратаки должно быть приемлемым для пользователя.


# Класс Castle: Отвечает за создание и управление замком. ✅
# Включает методы для изменения прочности и довольства замка, ✅
# а также обработки случайных событий и контратак пользователя. ✅


class Castle:
    def __init__(self):
        self.health = 100
        self.contentment = 100

    def add_health(self, health):
        self.health += health
        if self.health > 100:
            self.health = 100

    def add_contentment(self, contentment):
        self.contentment += contentment
        if self.contentment > 100:
            self.contentment = 100

    def reduce_health(self, health):
        self.health -= health
        if self.health < 0:
            self.health = 0

    def reduce_contentment(self, contentment):
        self.contentment -= contentment
        if self.contentment < 0:
            self.contentment = 0


    def __str__(self):
        return f'Прочность замка: {self.health}\nДовольство граждан: {self.contentment}'




def castle_health(castle, point):
    print(f'Ваши рабочие постарались и восстановили замку {point} прочности.')
    castle.add_health(point)

def castle_contentment(castle, point):
    print(f'Жители рады бесплатной еде. Довольство граждан +{point}.')
    castle.add_contentment(point)